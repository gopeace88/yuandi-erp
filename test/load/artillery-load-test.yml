# YUANDI ERP Artillery.io 로드 테스트 설정
# Artillery.io를 사용한 포괄적인 성능 테스트
# 
# 실행 방법:
# npm install -g artillery@latest
# artillery run test/load/artillery-load-test.yml

config:
  target: "http://localhost:3000"
  plugins:
    metrics-by-endpoint:
      useOnlyRequestNames: true
  phases:
    # 워밍업 단계
    - duration: 60
      arrivalRate: 5
      name: "Warm up"
    # 점진적 부하 증가
    - duration: 120
      arrivalRate: 10
      name: "Ramp up load"
    # 최대 부하 유지
    - duration: 300
      arrivalRate: 25
      name: "Sustained load"
    # 스파이크 테스트
    - duration: 60
      arrivalRate: 100
      name: "Spike test"
    # 쿨다운
    - duration: 60
      arrivalRate: 5
      name: "Cool down"

  # 환경 변수
  environments:
    development:
      target: "http://localhost:3000"
    staging:
      target: "https://yuandi-staging.vercel.app"
    production:
      target: "https://yuandi.vercel.app"

  # 성능 임계값
  ensure:
    p99: 2000  # 99%ile 응답시간 2초 미만
    p95: 1500  # 95%ile 응답시간 1.5초 미만
    p50: 800   # 50%ile 응답시간 0.8초 미만
    maxErrorRate: 1  # 에러율 1% 미만

  # HTTP 설정
  http:
    timeout: 10
    pool: 10
    maxSockets: 100

  # 페이로드 설정
  payload:
    path: "./test-data.csv"
    fields:
      - "name"
      - "phone"
      - "email"
    order: sequence
    skipHeader: true

# 테스트 시나리오 정의
scenarios:
  # 시나리오 1: 일반 사용자 워크플로우
  - name: "Normal User Workflow"
    weight: 70
    flow:
      # 로그인
      - post:
          url: "/api/auth/login"
          json:
            email: "manager@yuandi.com"
            password: "manager123"
          capture:
            json: "$.token"
            as: "authToken"
          expect:
            - statusCode: 200
            - contentType: json

      # 대시보드 조회
      - get:
          url: "/api/dashboard/summary"
          headers:
            Authorization: "Bearer {{ authToken }}"
          name: "Dashboard Summary"
          expect:
            - statusCode: 200
            - hasProperty: "totalOrders"

      # 제품 목록 조회
      - get:
          url: "/api/products?page=1&limit=20"
          headers:
            Authorization: "Bearer {{ authToken }}"
          name: "Products List"
          expect:
            - statusCode: 200

      # 주문 목록 조회
      - get:
          url: "/api/orders?page=1&limit=20"
          headers:
            Authorization: "Bearer {{ authToken }}"
          name: "Orders List"
          expect:
            - statusCode: 200

      # 매출 트렌드 조회
      - get:
          url: "/api/dashboard/sales-trend?days=7"
          headers:
            Authorization: "Bearer {{ authToken }}"
          name: "Sales Trend"
          expect:
            - statusCode: 200

      # 사용자 행동 시뮬레이션 (2-5초 대기)
      - think: 3

  # 시나리오 2: 고객 포털 사용
  - name: "Customer Portal Usage"
    weight: 20
    flow:
      # 고객 포털 접근
      - get:
          url: "/track"
          name: "Customer Portal Home"
          expect:
            - statusCode: 200

      # 주문 추적 조회
      - get:
          url: "/api/track?name={{ name }}&phone={{ phone }}"
          name: "Order Tracking"
          expect:
            - statusCode: 200

      - think: 2

  # 시나리오 3: 관리자 업무
  - name: "Admin Operations"
    weight: 10
    flow:
      # 관리자 로그인
      - post:
          url: "/api/auth/login"
          json:
            email: "admin@yuandi.com"
            password: "admin123"
          capture:
            json: "$.token"
            as: "adminToken"
          expect:
            - statusCode: 200

      # 시스템 설정 조회
      - get:
          url: "/api/settings"
          headers:
            Authorization: "Bearer {{ adminToken }}"
          name: "System Settings"
          expect:
            - statusCode: 200

      # 이벤트 로그 조회
      - get:
          url: "/api/logs?page=1&limit=50"
          headers:
            Authorization: "Bearer {{ adminToken }}"
          name: "Event Logs"
          expect:
            - statusCode: 200

      # 현금출납부 조회
      - get:
          url: "/api/cashbook?page=1&limit=20"
          headers:
            Authorization: "Bearer {{ adminToken }}"
          name: "Cashbook"
          expect:
            - statusCode: 200

      # 사용자 관리
      - get:
          url: "/api/users"
          headers:
            Authorization: "Bearer {{ adminToken }}"
          name: "User Management"
          expect:
            - statusCode: 200

      - think: 4

# 사전 정의된 테스트 후크
before:
  flow:
    # 시스템 상태 확인
    - get:
        url: "/api/health"
        expect:
          - statusCode: 200
    
    # 데이터베이스 연결 확인
    - get:
        url: "/api/health/database"
        expect:
          - statusCode: 200

after:
  flow:
    # 최종 시스템 상태 확인
    - get:
        url: "/api/health"
        expect:
          - statusCode: 200

# 특수 시나리오들
extraScenarios:
  # 데이터베이스 집약적 작업
  - name: "Database Intensive"
    weight: 5
    flow:
      - post:
          url: "/api/auth/login"
          json:
            email: "admin@yuandi.com"
            password: "admin123"
          capture:
            json: "$.token"
            as: "dbToken"

      # 복잡한 보고서 생성
      - get:
          url: "/api/reports/sales-by-category?period=month"
          headers:
            Authorization: "Bearer {{ dbToken }}"
          name: "Complex Sales Report"
          expect:
            - statusCode: 200

      # 재고 분석 보고서
      - get:
          url: "/api/reports/inventory-analysis"
          headers:
            Authorization: "Bearer {{ dbToken }}"
          name: "Inventory Analysis"
          expect:
            - statusCode: 200

      # 고객 분석 보고서
      - get:
          url: "/api/reports/customer-analysis"
          headers:
            Authorization: "Bearer {{ dbToken }}"
          name: "Customer Analysis"
          expect:
            - statusCode: 200

  # API 집약적 작업
  - name: "API Intensive"
    weight: 3
    flow:
      - post:
          url: "/api/auth/login"
          json:
            email: "manager@yuandi.com"
            password: "manager123"
          capture:
            json: "$.token"
            as: "apiToken"

      # 빠른 연속 API 호출
      - loop:
          over:
            - "/api/dashboard/summary"
            - "/api/products?limit=5"
            - "/api/orders?limit=5"
            - "/api/dashboard/order-status"
            - "/api/dashboard/low-stock"
          as: "endpoint"
          flow:
            - get:
                url: "{{ endpoint }}"
                headers:
                  Authorization: "Bearer {{ apiToken }}"
                expect:
                  - statusCode: 200

  # 모바일 사용자 시뮬레이션
  - name: "Mobile Users"
    weight: 2
    flow:
      # 모바일 사용자 에이전트로 고객 포털 접근
      - get:
          url: "/track"
          headers:
            User-Agent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15"
          name: "Mobile Customer Portal"
          expect:
            - statusCode: 200

      - get:
          url: "/api/track?name=김철수&phone=01012345678"
          headers:
            User-Agent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15"
          name: "Mobile Order Tracking"
          expect:
            - statusCode: 200

# 프로세서 정의 (커스텀 로직)
processor: "./artillery-processor.js"