
Running 5 tests using 1 worker

=== 시나리오 1: 상품 등록 및 재고 입고 시작 ===

📍 1단계: 로그인 및 세션 설정
  ✅ localStorage 세션 정보 설정 완료

📍 2단계: 대시보드에서 초기 재고 확인
  - 초기 재고: 2724개

📍 3단계: 설정 > 상품 관리에서 상품 추가
  - 설정 페이지 이동
  - 상품 관리 탭 선택
  - 상품 등록 모달 열림
  - 상품 정보 입력 시작
  - 상품 모델: TEST-1757832380532
  - 모든 필드 입력 완료
  ✅ 상품 추가 완료

📍 4단계: 재고 관리에서 재고 입고
  - 재고 관리 페이지 이동
  - 페이지 새로고침 완료
  - 상품 목록 로드 대기
  - 재고 입고 버튼 찾기
  - 재고 입고 버튼 클릭 (filter 방식)
  - 재고 입고 모달 열림
  - 페이지의 전체 select 개수: 2개
    Select 0: 첫 옵션 = "전체"
    Select 1: 첫 옵션 = "-- 상품 선택 --"
  - 라벨 기반으로 상품 select 찾기
  - 상품 옵션 개수: 134개
    옵션 0: "-- 상품 선택 --"
    옵션 1: "Alma | 알마 32 | Chanel | 재고: 21"
    옵션 2: "Alma | 알마 47 | Hermes | 재고: 4"
    옵션 3: "Alma | 알마 17 | Gucci | 재고: 116"
    옵션 4: "Alma | 알마 62 | Burberry | 재고: 10"
  - 찾고 있는 상품 모델: TEST-1757832380532
  - 테스트 상품 선택 성공 (ID: 1022)
  - 선택된 상품: "TEST-1757832380532 | 테스트 핸드백 | Louis Vuitton | 재고: 0"
  - 최종 선택된 값: 1022
  - 입고 수량: 10개
  - 수량 필드 값 확인: 10
  - 단가: 100 CNY
  - 단가 필드 값 확인: 100
  - 메모: 시나리오 1 테스트 입고
  - 보이는 저장 버튼 개수: 3개
  - 저장 버튼 클릭
  ✅ 재고 입고 완료 (모달 닫힘)

📍 5단계: 출납장부에서 입고 내역 확인
  - 출납장부 페이지 이동
  ✅ 입고 내역 발견
  - 금액 확인: 1,000 CNY (10개 × 100 CNY)

📍 6단계: 대시보드에서 재고 현황 재확인
  - 대시보드 페이지 이동
  - 최종 재고: 2734개
  - 재고 증가량: 10개 (예상: 10개)
  ✅ 재고 증가 정확히 반영됨

🎉 시나리오 1 테스트 완료!
========================================
📊 결과 요약:
  - 초기 재고: 2724개
  - 입고 수량: 10개
  - 최종 재고: 2734개
  - 재고 증가: 10개
========================================
✅ 모든 단계 성공적으로 완료
  ✓  1 [chromium] › tests/e2e/scenario-1-working.spec.ts:4:7 › 시나리오 1: 상품 등록 및 재고 입고 (localStorage 세션 유지) › 상품 등록부터 재고 입고까지 완전 테스트 (46.6s)

=== 시나리오 2: 주문 접수 및 재고 차감 시작 ===

📍 1단계: 로그인 및 세션 설정
  ✅ localStorage 세션 정보 설정 완료

📍 2단계: 대시보드에서 초기 재고 확인
  - 초기 재고: 2734개

📍 3단계: 주문 관리에서 새 주문 생성
  - 주문 추가 버튼 찾기
  ✘  2 [chromium] › tests/e2e/scenario-2-order.spec.ts:4:7 › 시나리오 2: 주문 접수 및 재고 차감 (localStorage 세션 유지) › 주문 생성 및 재고 차감 확인 (19.3s)

=== 시나리오 3: 주문 배송 처리 시작 ===

📍 1단계: 로그인 및 세션 설정
  ✅ localStorage 세션 정보 설정 완료

📍 2단계: 대시보드에서 초기 배송대기 주문 수 확인
  ✘  3 [chromium] › tests/e2e/scenario-3-shipping.spec.ts:4:7 › 시나리오 3: 주문 배송 처리 (localStorage 세션 유지) › 배송 처리 및 상태 변경 확인 (14.3s)

=== 시나리오 4: 반품 처리 시작 ===

📍 1단계: 로그인 및 세션 설정
  ✅ localStorage 세션 정보 설정 완료

📍 2단계: 대시보드에서 초기 재고 확인
  ✘  4 [chromium] › tests/e2e/scenario-4-refund.spec.ts:4:7 › 시나리오 4: 반품 처리 (localStorage 세션 유지) › 반품 처리 및 재고 복구 확인 (15.9s)

=== 시나리오 5: 엑셀 다운로드 시작 ===

📍 1단계: 로그인 및 세션 설정
  ✅ localStorage 세션 정보 설정 완료

📍 2단계: 주문 관리에서 엑셀 다운로드
  ✅ 주문 엑셀 다운로드 완료: 주문내역_2025-09-14.xlsx
  - 파일 크기: 130.70 KB

📍 3단계: 재고 관리에서 엑셀 다운로드
  ✅ 재고 엑셀 다운로드 완료: 재고현황_2025-09-14.xlsx
  - 파일 크기: 62.04 KB

📍 4단계: 출납장부에서 엑셀 다운로드
  ✅ 출납장부 엑셀 다운로드 완료: cashbook-2025-09-14.xlsx_2025-09-14.xlsx
  - 파일 크기: 134.32 KB

📍 5단계: 다운로드된 파일 확인
  - 총 3개의 엑셀 파일 다운로드됨
  - 다운로드된 파일 목록:
    • cashbook-2025-09-14.xlsx_2025-09-14.xlsx (134.32 KB)
    • 재고현황_2025-09-14.xlsx (62.04 KB)
    • 주문내역_2025-09-14.xlsx (130.70 KB)
  ✅ 엑셀 다운로드 기능 정상 작동

  - 테스트 완료 후 다운로드 파일 정리
  ✅ 다운로드 폴더 정리 완료

🎉 시나리오 5 테스트 완료!
========================================
📊 결과 요약:
  - 주문 관리: 엑셀 다운로드 테스트
  - 재고 관리: 엑셀 다운로드 테스트
  - 출납장부: 엑셀 다운로드 테스트
  - 총 3개 파일 다운로드 확인
========================================
✅ 모든 단계 성공적으로 완료
  ✓  5 [chromium] › tests/e2e/scenario-5-excel.spec.ts:6:7 › 시나리오 5: 엑셀 다운로드 (localStorage 세션 유지) › 각 화면에서 엑셀 다운로드 기능 확인 (14.6s)


  1) [chromium] › tests/e2e/scenario-2-order.spec.ts:4:7 › 시나리오 2: 주문 접수 및 재고 차감 (localStorage 세션 유지) › 주문 생성 및 재고 차감 확인 

    TimeoutError: page.waitForSelector: Timeout 10000ms exceeded.
    Call log:
    [2m  - waiting for locator('button:has-text("주문 추가")') to be visible[22m


      57 |     // 주문 추가 버튼 클릭
      58 |     console.log('  - 주문 추가 버튼 찾기');
    > 59 |     await page.waitForSelector('button:has-text("주문 추가")', { timeout: 10000 });
         |                ^
      60 |     const addOrderButton = page.locator('button').filter({ hasText: '주문 추가' });
      61 |     await addOrderButton.click();
      62 |     console.log('  - 주문 추가 모달 열림');
        at /mnt/d/00.Projects/00.YUANDI-ERP/tests/e2e/scenario-2-order.spec.ts:59:16

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results/scenario-2-order-시나리오-2-주문-893db-rage-세션-유지-주문-생성-및-재고-차감-확인-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results/scenario-2-order-시나리오-2-주문-893db-rage-세션-유지-주문-생성-및-재고-차감-확인-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: test-results/scenario-2-order-시나리오-2-주문-893db-rage-세션-유지-주문-생성-및-재고-차감-확인-chromium/error-context.md

  2) [chromium] › tests/e2e/scenario-3-shipping.spec.ts:4:7 › 시나리오 3: 주문 배송 처리 (localStorage 세션 유지) › 배송 처리 및 상태 변경 확인 

    TimeoutError: locator.textContent: Timeout 10000ms exceeded.
    Call log:
    [2m  - waiting for locator('h2:has-text("배송대기")').locator('..').locator('p.text-3xl')[22m


      34 |     // 배송대기 주문 수 확인
      35 |     const initialPendingElement = await page.locator('h2:has-text("배송대기")').locator('..').locator('p.text-3xl');
    > 36 |     const initialPending = await initialPendingElement.textContent();
         |                                                        ^
      37 |     const initialPendingNum = parseInt(initialPending?.replace(/[^0-9]/g, '') || '0');
      38 |     console.log(`  - 초기 배송대기: ${initialPendingNum}건`);
      39 |
        at /mnt/d/00.Projects/00.YUANDI-ERP/tests/e2e/scenario-3-shipping.spec.ts:36:56

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results/scenario-3-shipping-시나리오-3-10b48-rage-세션-유지-배송-처리-및-상태-변경-확인-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results/scenario-3-shipping-시나리오-3-10b48-rage-세션-유지-배송-처리-및-상태-변경-확인-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: test-results/scenario-3-shipping-시나리오-3-10b48-rage-세션-유지-배송-처리-및-상태-변경-확인-chromium/error-context.md

  3) [chromium] › tests/e2e/scenario-4-refund.spec.ts:4:7 › 시나리오 4: 반품 처리 (localStorage 세션 유지) › 반품 처리 및 재고 복구 확인 

    TimeoutError: locator.textContent: Timeout 10000ms exceeded.
    Call log:
    [2m  - waiting for locator('h2:has-text("재고")').locator('..').locator('p.text-3xl')[22m


      34 |     // 재고 정보 확인
      35 |     const initialStockElement = await page.locator('h2:has-text("재고")').locator('..').locator('p.text-3xl');
    > 36 |     const initialStock = await initialStockElement.textContent();
         |                                                    ^
      37 |     const initialStockNum = parseInt(initialStock?.replace(/[^0-9]/g, '') || '0');
      38 |     console.log(`  - 초기 재고: ${initialStockNum}개`);
      39 |
        at /mnt/d/00.Projects/00.YUANDI-ERP/tests/e2e/scenario-4-refund.spec.ts:36:52

    attachment #1: screenshot (image/png) ──────────────────────────────────────────────────────────
    test-results/scenario-4-refund-시나리오-4-반-a6e87-rage-세션-유지-반품-처리-및-재고-복구-확인-chromium/test-failed-1.png
    ────────────────────────────────────────────────────────────────────────────────────────────────

    attachment #2: video (video/webm) ──────────────────────────────────────────────────────────────
    test-results/scenario-4-refund-시나리오-4-반-a6e87-rage-세션-유지-반품-처리-및-재고-복구-확인-chromium/video.webm
    ────────────────────────────────────────────────────────────────────────────────────────────────

    Error Context: test-results/scenario-4-refund-시나리오-4-반-a6e87-rage-세션-유지-반품-처리-및-재고-복구-확인-chromium/error-context.md

  3 failed
    [chromium] › tests/e2e/scenario-2-order.spec.ts:4:7 › 시나리오 2: 주문 접수 및 재고 차감 (localStorage 세션 유지) › 주문 생성 및 재고 차감 확인 
    [chromium] › tests/e2e/scenario-3-shipping.spec.ts:4:7 › 시나리오 3: 주문 배송 처리 (localStorage 세션 유지) › 배송 처리 및 상태 변경 확인 
    [chromium] › tests/e2e/scenario-4-refund.spec.ts:4:7 › 시나리오 4: 반품 처리 (localStorage 세션 유지) › 반품 처리 및 재고 복구 확인 
  2 passed (3.0m)
